import React, { useState, useEffect } from "react";
import Modal from "react-modal";

Modal.setAppElement("#root");

const API_URL = "https://nodejs-hw-mongodb-y5ne.onrender.com";

const App = () => {
  const [cardNumber, setCardNumber] = useState("");
  const [cardDate, setCardDate] = useState("");
  const [responsible, setResponsible] = useState("–¢–æ–∫–º–∞–Ω –í.–ú.");
  const [storage, setStorage] = useState("");
  const [rows, setRows] = useState([{ name: "", quantity: 0, invNumber: "", price: "" }]);

  const [allKartky, setAllKartky] = useState([]);
  const [selectedCard, setSelectedCard] = useState(null);
  const [scanFile, setScanFile] = useState(null);
  const [modalIsOpen, setModalIsOpen] = useState(false);

  useEffect(() => {
    fetchAllCards();
  }, []);

  const addRow = () => setRows([...rows, { name: "", quantity: 0, invNumber: "", price: "" }]);
  const removeRow = (index) => setRows(rows.filter((_, i) => i !== index));
  const updateRow = (index, field, value) => {
    const updated = [...rows];
    updated[index][field] = value;
    setRows(updated);
  };

  const saveToServer = async () => {
    if (!cardNumber || !cardDate) {
      alert("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ —ñ –¥–∞—Ç—É!");
      return;
    }
    const newCard = { cardNumber, cardDate, responsible, storage, rows };
    const res = await fetch(`${API_URL}/api/kartky`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(newCard),
    });

    if (res.ok) {
      const createdCard = await res.json();
      setAllKartky(prev => [...prev, createdCard]);
      setCardNumber("");
      setCardDate("");
      setResponsible("–¢–æ–∫–º–∞–Ω –í.–ú.");
      setStorage("");
      setRows([{ name: "", quantity: 0, invNumber: "", price: "" }]);
      alert("–ö–∞—Ä—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");
    } else {
      alert("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏.");
    }
  };

  const fetchAllCards = async () => {
    const res = await fetch(`${API_URL}/api/kartky`);
    const data = await res.json();
    setAllKartky(data);
  };

  const openModal = (card) => {
    setSelectedCard(card);
    setScanFile(null);
    setModalIsOpen(true);
  };

  const closeModal = () => {
    setSelectedCard(null);
    setModalIsOpen(false);
    setScanFile(null);
  };

  const uploadScan = async () => {
    if (!scanFile) {
      alert("–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.");
      return;
    }
    if (!selectedCard || !selectedCard._id) {
      alert("–ù–µ –≤–∏–±—Ä–∞–Ω–æ –∫–∞—Ä—Ç–∫—É.");
      return;
    }

    const formData = new FormData();
    formData.append("scan", scanFile);

    const res = await fetch(`${API_URL}/api/kartky/${selectedCard._id}/scan`, {
      method: "POST",
      body: formData,
    });

    if (res.ok) {
      const updated = await res.json();
      alert("–°–∫–∞–Ω–∫–æ–ø—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!");
      fetchAllCards();
      setSelectedCard(updated);
      setScanFile(null);
    } else {
      alert("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.");
    }
  };

  const formatDate = (d) => {
    if (!d) return "";
    const [y, m, day] = d.split("-");
    return `${day}.${m}.${y}`;
  };

  return (
    <div style={{ padding: 20, fontFamily: "Arial" }}>
      <h2>–ù–æ–≤–∞ –∫–∞—Ä—Ç–∫–∞</h2>
      <input placeholder="–ù–æ–º–µ—Ä" value={cardNumber} onChange={(e) => setCardNumber(e.target.value)} />
      <input type="date" value={cardDate} onChange={(e) => setCardDate(e.target.value)} />
      <input placeholder="–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∞ –æ—Å–æ–±–∞" value={responsible} onChange={(e) => setResponsible(e.target.value)} />
      <input placeholder="–ù–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—ñ —É" value={storage} onChange={(e) => setStorage(e.target.value)} />

      <h3>–û—Ä–≥—Ç–µ—Ö–Ω—ñ–∫–∞</h3>
      {rows.map((row, i) => (
        <div key={i} style={{ display: "flex", gap: 5, marginBottom: 5 }}>
          <input placeholder="–ù–∞–∑–≤–∞" value={row.name} onChange={(e) => updateRow(i, "name", e.target.value)} />
          <input type="number" value={row.quantity} onChange={(e) => updateRow(i, "quantity", e.target.value)} />
          <input placeholder="–Ü–Ω–≤. ‚Ññ" value={row.invNumber} onChange={(e) => updateRow(i, "invNumber", e.target.value)} />
          <input placeholder="–¶—ñ–Ω–∞" value={row.price} onChange={(e) => updateRow(i, "price", e.target.value)} />
          <button onClick={() => removeRow(i)}>‚ùå</button>
        </div>
      ))}

      <br />
      <button onClick={addRow}>–î–æ–¥–∞—Ç–∏ —Ä—è–¥–æ–∫</button>
      <button onClick={saveToServer} style={{ marginLeft: 10 }}>–ó–±–µ—Ä–µ–≥—Ç–∏ –∫–∞—Ä—Ç–∫—É</button>

      <hr />
      <h2>–£—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–∞—Ä—Ç–∫–∏</h2>
      <ul>
        {allKartky.map((k, i) => (
          <li key={i}>
            ‚Ññ{k.cardNumber} –≤—ñ–¥ {formatDate(k.cardDate)} ‚Äî {k.responsible}{" "}
            <button onClick={() => openModal(k)}>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏</button>
          </li>
        ))}
      </ul>

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ */}
      <Modal
        isOpen={modalIsOpen}
        onRequestClose={closeModal}
        contentLabel="–î–µ—Ç–∞–ª—ñ –∫–∞—Ä—Ç–∫–∏"
        style={{
          content: { width: "80%", margin: "auto", padding: 20, height: "80%" },
        }}
      >
        {selectedCard && (
          <div>
            <h2>–ö–∞—Ä—Ç–∫–∞ ‚Ññ{selectedCard.cardNumber}</h2>
            <p><strong>–î–∞—Ç–∞:</strong> {formatDate(selectedCard.cardDate)}</p>
            <p><strong>–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∞ –æ—Å–æ–±–∞:</strong> {selectedCard.responsible}</p>
            <p><strong>–ù–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—ñ:</strong> {selectedCard.storage}</p>

            <h3>–û—Ä–≥—Ç–µ—Ö–Ω—ñ–∫–∞</h3>
            <table border="1" cellPadding="5" style={{ width: "100%", borderCollapse: "collapse" }}>
              <thead>
                <tr>
                  <th>‚Ññ</th>
                  <th>–ù–∞–∑–≤–∞</th>
                  <th>–ö-—Å—Ç—å</th>
                  <th>–Ü–Ω–≤. ‚Ññ</th>
                  <th>–¶—ñ–Ω–∞</th>
                </tr>
              </thead>
              <tbody>
                {selectedCard.rows?.map((r, i) => (
                  <tr key={i}>
                    <td>{i + 1}</td>
                    <td>{r.name}</td>
                    <td>{r.quantity}</td>
                    <td>{r.invNumber}</td>
                    <td>{r.price}</td>
                  </tr>
                ))}
              </tbody>
            </table>

            <div style={{ marginTop: 20 }}>
              <h4>–°–∫–∞–Ω–∫–æ–ø—ñ—è –∑ –ø—ñ–¥–ø–∏—Å–æ–º:</h4>
              {selectedCard.scanFile ? (
                <>
                  <iframe
                    src={`${API_URL}/api/kartky/scan/${selectedCard.scanFile}`}
                    width="100%"
                    height="400px"
                    title="PDF"
                  />
                  <br />
                  <button onClick={() => window.open(`${API_URL}/api/kartky/scan/${selectedCard.scanFile}`, "_blank")}>
                    üîΩ –í—ñ–¥–∫—Ä–∏—Ç–∏ / –î—Ä—É–∫
                  </button>
                </>
              ) : (
                <p>–°–∫–∞–Ω–∫–æ–ø—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è</p>
              )}

              <input
                type="file"
                accept="application/pdf"
                onChange={(e) => setScanFile(e.target.files[0])}
                style={{ marginTop: 10 }}
              />
              <br />
              <button onClick={uploadScan} style={{ marginTop: 10 }}>
                –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–∫–∞–Ω–∫–æ–ø—ñ—é
              </button>
            </div>

            <br />
            <button onClick={closeModal}>–ó–∞–∫—Ä–∏—Ç–∏</button>
          </div>
        )}
      </Modal>
    </div>
  );
};

export default App;
